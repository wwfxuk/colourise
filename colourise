#!/bin/bash
set -euf -o pipefail
shopt -s extglob


function print-help() {
    cat << EOF

Usage: colourise [--shotgun-log|--katana]

Colourise stdin using a specific parser.

Options:
    --shotgun-log       Colourise using parser for shotgun logs.
    --katana            Colourise using parser for Katana stderr.
    --ping              Colourise using parser for ping.
    --hiero             Colourise using parser for Hiero (hiero.core.log).


Examples:

    Colourise continuously a Shotgun log file:

        tail -F ~/.shotgun/logs/tk-desktop.log | colourise --shotgun-log

    Colourise continuously a Katana process, combining stdout and stderr
    before piping into to colourise:

        katana |& colourise --katana

EOF
}

# "Global" variables
START=''
LINE=''
END=''
PARSER='echo-line'


function echo-line() {
    # Will actually read from "global" variables
    echo -e -n "${START}"
    echo -n "${LINE}"
    echo -e "${END}"
}


function shotgun-log() {
    allOFF='\e[0m'
    red_bg='\e[41m'
    yellow_fg='\e[33m'
    grey_fg='\e[90m'

    # Will actually modify "global" variables
    # START="${allOFF}"
    END="${allOFF}"

    case "${LINE}" in
        *' WARN '*|*' WARNING '*)
            START="${yellow_fg}"
            ;;
        *' ERROR '*|*' CRITICAL '*|*' FATAL '*)
            START="${red_bg}"
            ;;
        *' DEBUG '*)
            START="${grey_fg}"
            ;;
        *' INFO '*)
            START="${allOFF}"
            ;;
    esac
    echo-line
}


function ping-ms() {
    local MS
    MS="${LINE##*time=}"  # Strip time= and anything before it
    MS="${MS/#<1/0}"      # Convert Windows <1ms to 0ms
    MS="${MS%%[!0-9]*}"   # Remove decimal/remaining non-digits
    MS="${MS:-${LINE}}"   # If empty, set to original line
    echo "${MS}"
}

function ping() {
    local MS
    allOFF='\e[0m'
    black_fg='\e[30m'
    black_bg='\e[40m'
    red_bg='\e[41m'
    green_bg='\e[42m'
    yellow_bg='\e[43m'
    yellow_fg='\e[33m'

    # Will actually modify "global" variables
    START="${allOFF}"
    END="${allOFF}"

    MS="$(ping-ms)"
    case "${MS,,*}" in  # Parse using lowercase version of MS
        +([0-9]) )
            # Valid ping ms response
            printf -v LINE "%5s " "${MS}"  # Comment this line out for full $LINE
            (( MS > 499 )) && START="${black_bg}${yellow_fg}"
            (( MS < 500 )) && START="${red_bg}"
            (( MS < 200 )) && START="${black_fg}${yellow_bg}"
            (( MS <  90 )) && START="${black_fg}${green_bg}"
            ;;
        ping*"bytes of data"* )
            # Initial ping info message
            START="${allOFF}"
            ;;
        * )
            # Anything else, i.e. errors
            START="${black_bg}${yellow_fg}"
            ;;
    esac
    echo-line
}


function katana() {
    allOFF='\e[0m'
    red_bg='\e[41m'
    yellow_fg='\e[33m'
    blue_fg='\e[34m'
    grey_fg='\e[90m'

    shopt -s nocasematch
    END="${allOFF}"

    case "${LINE}" in
        *warn*)
            START="${yellow_fg}"
            ;;
        *ERROR*|*CRITICAL*|*FATAL*)
            START="${red_bg}"
            ;;
        '[DEBUG'*)
            START="${grey_fg}"  # Python logging specific colouring
            ;;
        '[INFO'*)
            START="${blue_fg}"  # Python logging specific colouring
            ;;
        *)
            START="${allOFF}"
            ;;
    esac
    echo-line
}


function hiero() {
    allOFF='\e[0m'
    red_bg='\e[41m'
    yellow_fg='\e[33m'
    blue_fg='\e[34m'
    grey_fg='\e[90m'

    shopt -s nocasematch
    END="${allOFF}"

    case "${LINE}" in
        *warn*)
            START="${yellow_fg}"
            ;;
        *ERROR*|*CRITICAL*|*FATAL*)
            START="${red_bg}"
            ;;
        'DEBUG '*)
            START="${grey_fg}"  # Python logging specific colouring
            ;;
        'INFO '*)
            START="${blue_fg}"  # Python logging specific colouring
            ;;
        *)
            START="${allOFF}"
            ;;
    esac
    echo-line
}


for ARG in "${@}"
do
    case "${ARG}" in
        --help)
            print-help
            exit
            ;;
        --?*)  # 1 or more characters after --
            if [ -t 1 ]
            then
                # Colourise if stdout is terminal
                PARSER_NAME="${ARG#--}"

                # PATH=  to prevent it picking up external binaries
                PARSER_EXE="$(PATH= command -v ${PARSER_NAME})" && {
                    PARSER="${PARSER_NAME}"
                    break
                } || echo "Parser function not found: '${PARSER_NAME}'"
                shift
            else
                echo 'Output is not a terminal, just using echo-line'
                break
            fi
            ;;
    esac
done

# Enable colour for Mac Terminal explicitly
[ "${MACHTYPE/darwin/}" == "${MACHTYPE}" ] || export CLICOLOR=1

# IFS=      Prevent stripping leading whitespace
# read -r   Don't escape incoming backslash printed into piped-in stdout
while IFS= read -r LINE
do
    "${PARSER}" "${LINE}"
done
